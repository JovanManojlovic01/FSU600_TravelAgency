@page "/bookings-add"
@using TravelAgency.Repositories
@using TravelAgency.Models
@inject BookingRepository BookingRepo
@inject CustomerRepository CustomerRepo
@inject DestinationRepository DestinationRepo
@inject NavigationManager GoTo
@rendermode InteractiveServer

<h3>Add New Booking</h3>
<div>
    <form>
        <div>
            <label for="customer">Select Customer:</label>
            <select id="customer" @bind="SelectedCustomerId">
                <option value="" disabled>Select a customer</option>
                @foreach (var customer in Customers)
                {
                    <option value="@customer.Id">@customer.Name (@customer.Email)</option>
                }
            </select>
        </div>
        <div>
            <label for="destination">Select Destination:</label>
            <select id="destination" @bind="SelectedDestinationId">
                <option value="" disabled>Select a destination</option>
                @foreach (var destination in Destinations)
                {
                    <option value="@destination.Id">@destination.Name (€@destination.Price)</option>
                }
            </select>
        </div>
        <div>
            <label for="bookingTime">Booking Date & Time:</label>
            <input type="datetime-local" id="bookingTime" @bind="BookingTime" />
        </div>
        <br />
        <button type="button" class="btn btn-success" @onclick="SubmitBooking">Create Booking</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </form>
</div>


@code 
{
    private List<Customer> Customers = new();
    private List<Destination> Destinations = new();

    private int SelectedCustomerId { get; set; }
    private int SelectedDestinationId { get; set; }
    private DateTime BookingTime { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {

        Customers = await CustomerRepo.GetCustomersAsync();
        Destinations = await DestinationRepo.GetDestinationsAsync();
    }

    private async Task SubmitBooking()
    {
        if (SelectedCustomerId == 0 || SelectedDestinationId == 0)
        {

            Console.WriteLine("Both customer and destination must be selected.");
            return;
        }


        var newBooking = new Booking
            {
                customerID = SelectedCustomerId,
                destinationID = SelectedDestinationId,
                bookingTime = BookingTime
            };


        await BookingRepo.AddBookingAsync(newBooking);


        GoTo.NavigateTo("/bookings");
    }

    private void Cancel()
    {
        GoTo.NavigateTo("/bookings");
    }
}
